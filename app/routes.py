from flask import render_template, flash, redirect, url_for, request
from app import app, db
from app.forms import EditProfileForm, EmptyForm, LoginForm, PostForm, RegistrationForm
# routes are the different URLs that the application implements

from flask_login import current_user, login_user, logout_user, login_required
from app.models import Post, User
from werkzeug.urls import url_parse
from datetime import datetime

# @app.route -> decorator; modifies the function that follows it
# decorators associate / and /index to this function
# add GET and POST methods since this view function will now receive data
@app.route('/', methods=['GET', 'POST'])
@app.route('/index', methods=['GET', 'POST'])
@login_required
def index():
    form = PostForm()
    # insert new post into the database
    if form.validate_on_submit():
        post = Post(body=form.post.data, author=current_user)
        db.session.add(post)
        db.session.commit()
        flash('Your post is now live!!!')

        # redirect is a standard practice to respopnd to a POST req. generated by web form submission
        # Post -> redirect -> browser is now instructed to send a GET req. to grab the page
        # avoiding duplicate posts
        return redirect(url_for('index'))

    page = request.args.get('page', 1, type=int)
    posts = current_user.followed_posts().paginate(
        page,
        app.config['POSTS_PER_PAGE'],
        False
    )
    # posts = current_user.followed_posts().all()
    # posts = [
    #     {
    #         'author':{'username':'John'},
    #         'body': 'Beautiful day in Portland!'
    #     },
    #     {
    #         'author':{'username':'Susan'},
    #         'body': 'Avengers movie was so cool!'
    #     },
    #     {
    #         'author':{'username':'Brandon'},
    #         'body': 'Damn, I forgot to bring my umbrella'
    #     },
    #     {
    #         'author':{'username':'Andy'},
    #         'body': 'I really love database'
    #     },
    #     {
    #         'author':{'username':'Charles'},
    #         'body': 'The food was awesome'
    #     }
    # ]

    # converts a template into a complete HTML : rendering
    return render_template('index.html', title='Home Page', form=form, posts = posts.items)

@app.route('/user/<username>')
@login_required
def user(username):
    user = User.query.filter_by(username=username).first_or_404()
    posts = [
        {'author': user, 'body': 'Test post #1'},
        {'author': user, 'body': 'Test post #2'}
    ]
    form = EmptyForm()
    return render_template('user.html', title="User Profile", user=user, posts=posts, form=form)


# login function accepts GET and POST requests. GET: return info to client, POST: browser submits form data to the server
@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()

    # form processing work; if browser sends GET request, it returns False
    # if browser sends POST request and everything is all right, it will return True
    # flash(): show message to user, redirect(): instructs client web browser to automatically navigate to a different page
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user, remember=form.remember_me.data)

        next_page = request.args.get('next')
        if not next_page or url_parse(next_page).netloc != '':
            next_page = url_for('index')
        return redirect(next_page)
    return render_template('login.html', title='Sign In', form=form)

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = RegistrationForm()

    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!')
        return redirect(url_for('login'))

    return render_template('register.html', title='Register', form=form)

# register the function to be executed right before the view function
@app.before_request
def before_request():
    # if current user is logged in, set the last_seen to the current time
    if current_user.is_authenticated:
        current_user.last_seen = datetime.utcnow()
        db.session.commit()

@app.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    form = EditProfileForm(current_user.username)
    if form.validate_on_submit():
        current_user.username=form.username.data
        current_user.about_me=form.about_me.data
        db.session.commit()
        flash('Your changes have been saved')
        return redirect(url_for('edit_profile'))
    elif request.method=='GET':
        form.username.data = current_user.username
        form.about_me.data = current_user.about_me
    return render_template('edit_profile.html', title='Edit Profile', form=form)

@app.route('/follow/<username>', methods=['POST'])
@login_required
def follow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=username).first()
        if user is None:
            flash('User {} not found'.format(username))
            return redirect(url_for('index'))
        if user == current_user:
            flash('You cannot follow yourself')
            return redirect(url_for('user', username=username))
        current_user.follow(user)
        db.session.commit()
        flash('You are following {}!'.format(username))
        return redirect(url_for('index', username=username))
    else:
        return redirect(url_for('index'))

@app.route('/unfollow/<username>', methods=['POST'])
@login_required
def unfollow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=username).first()
        if user is None:
            flash('User {} not found'.format(username))
            return redirect(url_for('index'))
        if user == current_user:
            flash('You cannot unfollow yourself')
            return redirect(url_for('user', username=username))
        current_user.unfollow(user)
        db.session.commit()
        flash('You are not following {}!'.format(username))
        return redirect(url_for('index', username=username))
    else:
        return redirect(url_for('index'))

@app.route('/explore')
@login_required
def explore():
    posts = Post.query.order_by(Post.timestamp.desc()).all()
    return render_template('index.html', title='Explore', posts=posts)